// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ExSys.Models;

public partial class Exam_System_Generate_DatabaseContext : DbContext
{
    public Exam_System_Generate_DatabaseContext()
    {
    }

    public Exam_System_Generate_DatabaseContext(DbContextOptions<Exam_System_Generate_DatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Student_Course> Student_Courses { get; set; }

    public virtual DbSet<Student_Exam_Question> Student_Exam_Questions { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<Track> Tracks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Server=.;database=Exam_System_Generate_Database;Integrated Security=True;trustservercertificate = true");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.Branch_ID);

            entity.Property(e => e.Branch_ID).ValueGeneratedNever();
            entity.Property(e => e.Branch_Name)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.Tracks).WithMany(p => p.Branches)
                .UsingEntity<Dictionary<string, object>>(
                    "Branch_Track",
                    r => r.HasOne<Track>().WithMany()
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Branch_Tracks_Tracks"),
                    l => l.HasOne<Branch>().WithMany()
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Branch_Tracks_Branches"),
                    j =>
                    {
                        j.HasKey("Branch_ID", "Track_ID");
                        j.ToTable("Branch_Tracks");
                    });
        });

        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasKey(e => e.Choice_ID);

            entity.Property(e => e.Choice_ID).ValueGeneratedNever();
            entity.Property(e => e.Choice_Text)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Question).WithMany(p => p.Choices)
                .HasForeignKey(d => d.Question_ID)
                .HasConstraintName("FK_Choices_Questions");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Course_ID).HasName("PK__Courses__F5C807D38E645DDE");

            entity.Property(e => e.Course_Name)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.Topics).WithMany(p => p.Courses)
                .UsingEntity<Dictionary<string, object>>(
                    "Course_Topic",
                    r => r.HasOne<Topic>().WithMany()
                        .HasForeignKey("Topic_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Course_Topics_Topics"),
                    l => l.HasOne<Course>().WithMany()
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Course_Topics_Courses"),
                    j =>
                    {
                        j.HasKey("Course_ID", "Topic_ID");
                        j.ToTable("Course_Topics");
                    });
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.Exam_ID).HasName("PK__Exams__C782CA7927F8B2CE");

            entity.HasOne(d => d.Course).WithMany(p => p.Exams)
                .HasForeignKey(d => d.Course_ID)
                .HasConstraintName("FK_Exams_Courses");

            entity.HasMany(d => d.Questions).WithMany(p => p.Exams)
                .UsingEntity<Dictionary<string, object>>(
                    "Exam_Question",
                    r => r.HasOne<Question>().WithMany()
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Exam_Questions_Questions"),
                    l => l.HasOne<Exam>().WithMany()
                        .HasForeignKey("Exam_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Exam_Questions_Exams"),
                    j =>
                    {
                        j.HasKey("Exam_ID", "Question_ID");
                        j.ToTable("Exam_Questions");
                    });
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.Instructor_ID);

            entity.Property(e => e.Instructor_Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Instructor_Fname)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Instructor_Lname)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Instructor_Password)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.Courses).WithMany(p => p.Instructors)
                .UsingEntity<Dictionary<string, object>>(
                    "Instructor_Course",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Instructor_Courses_Courses"),
                    l => l.HasOne<Instructor>().WithMany()
                        .HasForeignKey("Instructor_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Instructor_Courses_Instructors"),
                    j =>
                    {
                        j.HasKey("Instructor_ID", "Course_ID");
                        j.ToTable("Instructor_Courses");
                    });
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Question_ID).HasName("PK__Question__5C22EDA88A4571DD");

            entity.Property(e => e.Question_ModelAnswer)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Question_Text)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Question_Type)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Course).WithMany(p => p.Questions)
                .HasForeignKey(d => d.Course_ID)
                .HasConstraintName("FK_Questions_Courses");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.Student_ID);

            entity.Property(e => e.Student_ID).ValueGeneratedNever();
            entity.Property(e => e.Student_Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Student_FName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Student_LName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Student_Password)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Track).WithMany(p => p.Students)
                .HasForeignKey(d => d.Track_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Students_Tracks");
        });

        modelBuilder.Entity<Student_Course>(entity =>
        {
            entity.HasKey(e => new { e.Student_ID, e.Course_ID });

            entity.HasOne(d => d.Course).WithMany(p => p.Student_Courses)
                .HasForeignKey(d => d.Course_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Courses_Courses");

            entity.HasOne(d => d.Student).WithMany(p => p.Student_Courses)
                .HasForeignKey(d => d.Student_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Courses_Students");
        });

        modelBuilder.Entity<Student_Exam_Question>(entity =>
        {
            entity.HasKey(e => new { e.Student_ID, e.Exam_ID, e.Question_ID });

            entity.Property(e => e.Student_QAnswers)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Student_QCorrection)
                .HasMaxLength(1)
                .IsUnicode(false);

            entity.HasOne(d => d.Exam).WithMany(p => p.Student_Exam_Questions)
                .HasForeignKey(d => d.Exam_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Exam_Questions_Exams");

            entity.HasOne(d => d.Question).WithMany(p => p.Student_Exam_Questions)
                .HasForeignKey(d => d.Question_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Exam_Questions_Questions");

            entity.HasOne(d => d.Student).WithMany(p => p.Student_Exam_Questions)
                .HasForeignKey(d => d.Student_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Student_Exam_Questions_Students");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Topic_ID).HasName("PK__Topics__0F4523B5AAE1402B");

            entity.Property(e => e.To_Name)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Track>(entity =>
        {
            entity.HasKey(e => e.Track_ID);

            entity.HasIndex(e => e.Supervisor_ID, "UIX_Supervisor_ID").IsUnique();

            entity.Property(e => e.Track_Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Supervisor).WithOne(p => p.Track)
                .HasForeignKey<Track>(d => d.Supervisor_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tracks_Instructors");

            entity.HasMany(d => d.Courses).WithMany(p => p.Tracks)
                .UsingEntity<Dictionary<string, object>>(
                    "Track_Course",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Track_Courses_Courses"),
                    l => l.HasOne<Track>().WithMany()
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Track_Courses_Tracks"),
                    j =>
                    {
                        j.HasKey("Track_ID", "Course_ID").HasName("PK_Departments");
                        j.ToTable("Track_Courses");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}